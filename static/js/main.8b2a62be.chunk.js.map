{"version":3,"sources":["Components/ControlPanel/ControlPanel.styles.ts","Data/TDC2021.ts","Components/ControlPanel/ToggleWord.tsx/ToggleWord.style.ts","Components/ControlPanel/ToggleWord.tsx/ToggleWord.tsx","Components/ControlPanel/TeamPointControl/TeamPointControl.style.ts","Components/ControlPanel/TeamPointControl/TeamPointControl.tsx","config.ts","Components/ControlPanel/ControlPanel.tsx","Utilities/Broadcaster.ts","Components/Dashboard/Dashboard.styles.ts","Components/Word/Word.styles.ts","Components/Colors.ts","Components/Word/Word.tsx","Components/Dashboard/Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["columnMargin","marginBottom","marginTop","styles","makeStyles","outerMostContainer","height","width","controlPanelContainer","display","justifyContent","marginLeft","marginRight","columnContainer","flexDirection","wordColumnContainer","pickSong","padding","songTitle","fontWeight","fontSize","triviaToggle","alignItems","buildWords","words","console","log","arrayLength","randomIndices","length","index","Math","floor","random","includes","push","map","w","text","visible","stopWord","SongData","author","title","trivia","triviaAnswer","showTrivia","toggleWordStyle","toggleWord","props","backgroundColor","color","ToggleWord","idx","handleWordClick","classes","Paper","elevation","onClick","className","container","teamName","TeamPointControl","points","name","handlePointChange","Card","IconButton","TOGGLE_WORD_ACTION","SET_SONG_ACTION","TOGGLE_TRIVIA_ACTION","reducer","state","action","type","wordIndex","visibility","word","song","Error","ControlPanel","useReducer","activeSong","dispatch","useState","team1Points","setTeam1Points","team2Points","setTeam2Points","useEffect","bc","BroadcastChannel","Config","postMessage","close","sendSong","sendPoints","style","amount","wordsContainer","triviaContainer","triviaText","pointsContainer","position","left","wordStyles","wordContainer","borderLeft","borderRight","borderTop","borderBottom","wordStyle","WordComponent","initialState","Dashboard","dataFromBroadCast","setDataFromBroadCast","teamPoints","setTeamPoints","closeConnection","songUpdate","pointUpdate","onmessage","data","broadcastSong","subscribeToBroadcast","content","Word","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b2a62be.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const columnMargin = {\r\n  marginBottom: '100px',\r\n  marginTop: '100px',\r\n};\r\n\r\nexport const styles = makeStyles({\r\n  outerMostContainer: {\r\n    height: '100vh',\r\n    width: '100%',\r\n  },\r\n  controlPanelContainer: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    marginLeft: '100px',\r\n    marginRight: '100px',\r\n    height: '100%',\r\n  },\r\n  columnContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    ...columnMargin,\r\n  },\r\n  wordColumnContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'space-between',\r\n    ...columnMargin,\r\n  },\r\n  pickSong: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginBottom: '10px',\r\n    padding: '20px',\r\n    width: '100%',\r\n  },\r\n  songTitle: {\r\n    fontWeight: 'bolder',\r\n    fontSize: '18px',\r\n  },\r\n  triviaToggle: {\r\n    width: '100px',\r\n    height: '100px',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    fontSize: '30px',\r\n  },\r\n});\r\n","import { Song, Word } from '../Components/types';\r\n\r\nconst rand = (arrayLength: number) => Math.floor(Math.random() * arrayLength);\r\n\r\nexport const buildWords = (words: string[]): Word[] => {\r\n  console.log('building random stopwords');\r\n  const randomIndices: number[] = [];\r\n  while (randomIndices.length < 2) {\r\n    const index = rand(words.length);\r\n    if (!randomIndices.includes(index)) {\r\n      randomIndices.push(index);\r\n    }\r\n  }\r\n  return words.map((w, index) => ({\r\n    text: w,\r\n    visible: false,\r\n    stopWord: randomIndices.includes(index),\r\n  }));\r\n};\r\n\r\nexport const SongData: Song[] = [\r\n  {\r\n    author: 'Rollo & King',\r\n    title: 'Der står et billede af dig på mit bord',\r\n    words: buildWords(['Der', 'står', 'et', 'billede', 'af', 'dig']),\r\n    trivia: 'Hvad var Rollo & Kings job før de lavede musik',\r\n    triviaAnswer: 'Skolelærer',\r\n    showTrivia: false,\r\n  },\r\n  {\r\n    author: 'Shu-bi-dua',\r\n    title: 'Danmark',\r\n    words: buildWords(['Den', 'der', 'siger', 'andet', 'lyver']),\r\n    trivia:\r\n      'Hvor mange medlemmer har der været med i shubidua over årene: 3, 5, 9, 11 eller 16?',\r\n    triviaAnswer: '16',\r\n    showTrivia: false,\r\n  },\r\n];\r\n","import { makeStyles } from '@material-ui/core';\r\n\r\nexport interface wordStyleProps {\r\n  visible: boolean;\r\n  stopWord: boolean;\r\n}\r\n\r\nexport const toggleWordStyle = makeStyles({\r\n  toggleWord: (props: wordStyleProps) => ({\r\n    width: '100px',\r\n    height: '100px',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    fontSize: '20px',\r\n    fontWeight: 'bolder',\r\n    marginBottom: '10px',\r\n    backgroundColor: props.visible ? 'lightgreen' : 'pink',\r\n    color: props.stopWord ? 'red' : 'black',\r\n  }),\r\n});\r\n","import { Paper } from '@material-ui/core';\r\nimport { Word } from '../../types';\r\nimport { toggleWordStyle } from './ToggleWord.style';\r\n\r\ninterface ToggleWordProps extends Word {\r\n  handleWordClick: () => void;\r\n  idx: number;\r\n}\r\n\r\nconst ToggleWord = ({\r\n  idx,\r\n  visible,\r\n  stopWord,\r\n  handleWordClick,\r\n}: ToggleWordProps) => {\r\n  const classes = toggleWordStyle({ visible, stopWord: stopWord || false });\r\n\r\n  return (\r\n    <Paper\r\n      elevation={2}\r\n      onClick={handleWordClick}\r\n      className={classes.toggleWord}\r\n    >\r\n      <div>{idx + 1}</div>\r\n    </Paper>\r\n  );\r\n};\r\nexport default ToggleWord;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = makeStyles({\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginBottom: '50px',\r\n    alignItems: 'center',\r\n    padding: '10px',\r\n  },\r\n  teamName: {\r\n    fontSize: '22px',\r\n  },\r\n});\r\n\r\nexport default styles;\r\n","import { IconButton, Card } from '@material-ui/core';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport styles from './TeamPointControl.style';\r\n\r\ninterface TeamPointControlProps {\r\n  handlePointChange: (amount: number) => void;\r\n  points: number;\r\n  name: string;\r\n}\r\n\r\nconst TeamPointControl = ({\r\n  points,\r\n  name,\r\n  handlePointChange,\r\n}: TeamPointControlProps) => {\r\n  const classes = styles();\r\n  return (\r\n    <Card className={classes.container}>\r\n      <span className={classes.teamName}> {name} </span>\r\n\r\n      <div>\r\n        <IconButton aria-label=\"delete\" onClick={() => handlePointChange(-1)}>\r\n          <ArrowDownwardIcon fontSize=\"inherit\" />\r\n        </IconButton>\r\n        {points}\r\n        <IconButton aria-label=\"delete\" onClick={() => handlePointChange(1)}>\r\n          <ArrowUpwardIcon fontSize=\"inherit\" />\r\n        </IconButton>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\nexport default TeamPointControl;\r\n","export default {\r\n  broadcastChannelId: 'hitMedSangen',\r\n};\r\n","import { Paper } from '@material-ui/core';\r\nimport { useReducer, useEffect, useState } from 'react';\r\nimport Config from '../../config';\r\nimport { Song, Word } from '../types';\r\nimport { styles } from './ControlPanel.styles';\r\nimport { SongData } from '../../Data/TDC2021';\r\nimport ToggleWord from './ToggleWord.tsx/ToggleWord';\r\nimport TeamPointControl from './TeamPointControl/TeamPointControl';\r\nimport { sendPoints, sendSong } from '../../Utilities/Broadcaster';\r\n\r\nconst TOGGLE_WORD_ACTION = 'toggleWordVisiblity';\r\ninterface toggleWordAction {\r\n  wordIndex: number;\r\n  type: typeof TOGGLE_WORD_ACTION;\r\n  visibility: boolean;\r\n}\r\nconst SET_SONG_ACTION = 'setSong';\r\ninterface setSongAction {\r\n  type: typeof SET_SONG_ACTION;\r\n  song: Song;\r\n}\r\nconst TOGGLE_TRIVIA_ACTION = 'toggleTrivia';\r\ninterface toggleTriviaAction {\r\n  type: typeof TOGGLE_TRIVIA_ACTION;\r\n  visibility: boolean;\r\n}\r\n\r\ntype validActions = toggleWordAction | setSongAction | toggleTriviaAction;\r\n\r\nconst toggleWordVisiblity = (\r\n  words: Word[],\r\n  index: number,\r\n  visibility: boolean,\r\n) =>\r\n  words.map((word, idx) =>\r\n    index === idx ? { ...word, visible: visibility } : { ...word },\r\n  );\r\n\r\nfunction reducer(state: Song, action: validActions): Song {\r\n  switch (action.type) {\r\n    case TOGGLE_WORD_ACTION:\r\n      return {\r\n        ...state,\r\n        words: toggleWordVisiblity(\r\n          state.words,\r\n          action.wordIndex,\r\n          action.visibility,\r\n        ),\r\n      };\r\n    case SET_SONG_ACTION:\r\n      return action.song;\r\n    case TOGGLE_TRIVIA_ACTION:\r\n      return { ...state, showTrivia: action.visibility };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nfunction ControlPanel() {\r\n  const [activeSong, dispatch] = useReducer(reducer, SongData[0]);\r\n  const [team1Points, setTeam1Points] = useState(0);\r\n  const [team2Points, setTeam2Points] = useState(0);\r\n\r\n  const handleSongClick = (index: number) =>\r\n    dispatch({ type: SET_SONG_ACTION, song: SongData[index] });\r\n  const handleWordClick = (index: number, visible: boolean) =>\r\n    dispatch({\r\n      type: TOGGLE_WORD_ACTION,\r\n      wordIndex: index,\r\n      visibility: visible,\r\n    });\r\n  const handleTriviaClick = (visible: boolean) =>\r\n    dispatch({ type: TOGGLE_TRIVIA_ACTION, visibility: visible });\r\n\r\n  useEffect(() => {\r\n    sendSong(activeSong);\r\n  }, [activeSong]);\r\n\r\n  useEffect(() => {\r\n    sendPoints({ team1Points, team2Points });\r\n  }, [team1Points, team2Points]);\r\n\r\n  const classes = styles();\r\n\r\n  return (\r\n    <div className={classes.outerMostContainer}>\r\n      <div className={classes.controlPanelContainer}>\r\n        {/* songpicker */}\r\n        <div className={classes.columnContainer}>\r\n          {SongData.map((song, idx) => (\r\n            <Paper\r\n              elevation={1}\r\n              className={classes.pickSong}\r\n              onClick={() => handleSongClick(idx)}\r\n            >\r\n              <span className={classes.songTitle}>{song.author}</span>\r\n              <span>{song.title}</span>\r\n            </Paper>\r\n          ))}\r\n        </div>\r\n\r\n        {/* toggle visibility  */}\r\n        <div className={classes.wordColumnContainer}>\r\n          {activeSong.words.map((word, idx) => (\r\n            <ToggleWord\r\n              idx={idx}\r\n              handleWordClick={() => handleWordClick(idx, !word.visible)}\r\n              stopWord={word.stopWord}\r\n              visible={word.visible}\r\n              text={word.text}\r\n            />\r\n          ))}\r\n        </div>\r\n\r\n        {/* trivia + points */}\r\n        <div className={classes.columnContainer}>\r\n          <Paper\r\n            elevation={2}\r\n            className={classes.triviaToggle}\r\n            onClick={() => handleTriviaClick(!activeSong.showTrivia)}\r\n          >\r\n            <div style={{ color: activeSong.showTrivia ? 'green' : 'red' }}>\r\n              Trivia\r\n            </div>\r\n          </Paper>\r\n        </div>\r\n\r\n        <div className={classes.columnContainer}>\r\n          <TeamPointControl\r\n            name=\"Sasha Dupont\"\r\n            points={team1Points}\r\n            handlePointChange={(amount) => setTeam1Points(team1Points + amount)}\r\n          />\r\n          <TeamPointControl\r\n            name=\"Sigurd Bertet\"\r\n            points={team2Points}\r\n            handlePointChange={(amount) => setTeam2Points(team2Points + amount)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ControlPanel;\r\n","import { Song, TeamPoints } from '../Components/types';\r\nimport Config from '../config';\r\n\r\nexport const sendSong = (song: Song) => {\r\n  console.log('sending song', song);\r\n  const bc = new BroadcastChannel(Config.broadcastChannelId);\r\n  bc.postMessage({ song });\r\n  bc.close();\r\n};\r\n\r\nexport const sendPoints = (points: TeamPoints) => {\r\n  console.log('sending points', points);\r\n  const bc = new BroadcastChannel(Config.broadcastChannelId);\r\n  bc.postMessage({ points });\r\n  bc.close();\r\n};\r\n\r\nexport const subscribeToBroadcast = (\r\n  songUpdate: (song: Song) => void,\r\n  pointUpdate: (points: TeamPoints) => void,\r\n): (() => void) => {\r\n  const bc = new BroadcastChannel(Config.broadcastChannelId);\r\n  bc.onmessage = ({ data }) => {\r\n    console.log('got some broadcast data', data);\r\n    if (data.song) {\r\n      const broadcastSong: Song = data.song as Song;\r\n      songUpdate(broadcastSong);\r\n    }\r\n    if (data.points) {\r\n      pointUpdate(data.points);\r\n    }\r\n  };\r\n  return () => bc.close();\r\n};\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = makeStyles({\r\n  wordsContainer: {\r\n    display: 'flex',\r\n    justifyContent: 'space-evenly',\r\n    alignItems: 'center',\r\n    height: '100vh',\r\n    backgroundColor: '#373737',\r\n  },\r\n  triviaContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    width: '100%',\r\n    height: '100vh',\r\n    backgroundColor: '#373737',\r\n    color: 'white',\r\n    fontSize: '60px',\r\n  },\r\n  triviaText: {\r\n    marginLeft: '10%',\r\n    marginRight: '10%',\r\n  },\r\n  pointsContainer: {\r\n    position: 'absolute',\r\n    color: 'white',\r\n    fontSize: '26px',\r\n    left: '10px',\r\n  },\r\n});\r\n\r\nexport default styles;\r\n","import { makeStyles } from '@material-ui/core';\r\nimport { songDarkBlue, songRed } from '../Colors';\r\n\r\nexport interface wordStyleProps {\r\n  visible: boolean;\r\n  stopWord: boolean;\r\n}\r\nexport const wordStyles = makeStyles({\r\n  wordContainer: (props: wordStyleProps) => ({\r\n    backgroundColor: props.stopWord ? songRed : songDarkBlue,\r\n    color: 'white',\r\n    'flex-grow': '1',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    borderLeft: 'solid 1px white',\r\n    borderRight: 'solid 1px white',\r\n    borderTop: 'solid 5px white',\r\n    borderBottom: 'solid 5px white',\r\n    height: '250px',\r\n    fontSize: props.visible ? '100px' : '150px',\r\n  }),\r\n  wordStyle: (props: wordStyleProps) => ({\r\n    marginBottom: props.visible ? '0' : '25px',\r\n  }),\r\n});\r\n","export const songDarkBlue = '#000fe7';\r\nexport const songRed = '#d34249';\r\n","import { Word } from '../types';\r\nimport { wordStyles } from './Word.styles';\r\n\r\nconst WordComponent = ({ text, visible, stopWord }: Word) => {\r\n  const classes = wordStyles({ stopWord: stopWord || false, visible });\r\n\r\n  return (\r\n    <div className={classes.wordContainer} key={text}>\r\n      <span className={classes.wordStyle}>{visible ? text : '𝄞'}</span>\r\n    </div>\r\n  );\r\n};\r\nexport default WordComponent;\r\n","import { useEffect, useState } from 'react';\r\nimport styles from './Dashboard.styles';\r\nimport Word from '../Word/Word';\r\nimport { DashboardState, TeamPoints } from '../types';\r\nimport { subscribeToBroadcast } from '../../Utilities/Broadcaster';\r\n\r\nconst initialState: DashboardState = {\r\n  words: [],\r\n  trivia: '',\r\n  showTrivia: false,\r\n};\r\n\r\nfunction Dashboard() {\r\n  const [dataFromBroadCast, setDataFromBroadCast] =\r\n    useState<DashboardState>(initialState);\r\n  const [teamPoints, setTeamPoints] = useState<TeamPoints>({\r\n    team1Points: 0,\r\n    team2Points: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const closeConnection = subscribeToBroadcast(\r\n      (song) => setDataFromBroadCast(song),\r\n      (points) => console.log('got points', setTeamPoints(points)),\r\n    );\r\n    return () => {\r\n      closeConnection();\r\n    };\r\n  }, []);\r\n\r\n  const classes = styles();\r\n\r\n  const content = dataFromBroadCast.showTrivia ? (\r\n    <div className={classes.triviaContainer}>\r\n      <span className={classes.triviaText}>{dataFromBroadCast.trivia}</span>\r\n    </div>\r\n  ) : (\r\n    <div className={classes.wordsContainer}>\r\n      {dataFromBroadCast.words.map((word) => (\r\n        <Word\r\n          visible={word.visible}\r\n          text={word.text}\r\n          stopWord={word.stopWord && word.visible}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.pointsContainer}>\r\n        <div>Sasha Dupont: {teamPoints.team1Points}</div>\r\n        <div>Sigurd Bertet: {teamPoints.team2Points}</div>\r\n      </div>\r\n      {content}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport ControlPanel from './Components/ControlPanel/ControlPanel';\nimport Dashboard from './Components/Dashboard/Dashboard';\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <div>\n          <Switch>\n            <Route exact path=\"/control-panel\">\n              <ControlPanel />\n            </Route>\n            <Route path=\"/\">\n              <Dashboard />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}